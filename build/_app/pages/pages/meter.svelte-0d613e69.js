import{S as ql,i as Ol,s as Ul,e as a,t as s,k as u,c as l,a as r,h as i,d as t,m,b as n,g as ut,F as e,j as Pl,n as Rl,v as Fl,x as Xe,y as Ye,f as Hl,z as Ze,r as $e,p as et,C as tt,T as jl}from"../../chunks/index-427cb11b.js";import{T as zl,t as Gl}from"../../chunks/tableStyles-b061a170.js";function Wl(p){let o,b,V,I,S,w,L,h,T,D;return{c(){o=a("label"),b=s(p[3]),V=s(": "),I=s(p[11]),L=u(),h=a("meter"),this.h()},l(f){o=l(f,"LABEL",{for:!0,id:!0,style:!0});var c=r(o);b=i(c,p[3]),V=i(c,": "),I=i(c,p[11]),c.forEach(t),L=m(f),h=l(f,"METER",{class:!0,id:!0,min:!0,max:!0,low:!0,high:!0,optimum:!0,style:!0,"aria-valuenow":!0,"aria-valuemax":!0,"aria-valuemin":!0,"aria-labelledby":!0,"aria-valuetext":!0,"data-testid":!0});var R=r(h);R.forEach(t),this.h()},h(){n(o,"for",S=`meter-${p[4]}`),n(o,"id",w=`meter-label-${p[4]}`),n(o,"style",p[10]),n(h,"class","meter"),n(h,"id",T=`meter-${p[4]}`),n(h,"min",p[2]),n(h,"max",p[1]),n(h,"low",p[5]),n(h,"high",p[6]),n(h,"optimum",p[7]),h.value=p[0],n(h,"style",p[9]),n(h,"aria-valuenow",p[0]),n(h,"aria-valuemax",p[1]),n(h,"aria-valuemin",p[2]),n(h,"aria-labelledby",D=`meter-label-${p[4]}`),n(h,"aria-valuetext",p[8]),n(h,"data-testid","meter-test")},m(f,c){ut(f,o,c),e(o,b),e(o,V),e(o,I),ut(f,L,c),ut(f,h,c)},p(f,[c]){c&8&&Pl(b,f[3]),c&2048&&Pl(I,f[11]),c&16&&S!==(S=`meter-${f[4]}`)&&n(o,"for",S),c&16&&w!==(w=`meter-label-${f[4]}`)&&n(o,"id",w),c&1024&&n(o,"style",f[10]),c&16&&T!==(T=`meter-${f[4]}`)&&n(h,"id",T),c&4&&n(h,"min",f[2]),c&2&&n(h,"max",f[1]),c&32&&n(h,"low",f[5]),c&64&&n(h,"high",f[6]),c&128&&n(h,"optimum",f[7]),c&1&&(h.value=f[0]),c&512&&n(h,"style",f[9]),c&1&&n(h,"aria-valuenow",f[0]),c&2&&n(h,"aria-valuemax",f[1]),c&4&&n(h,"aria-valuemin",f[2]),c&16&&D!==(D=`meter-label-${f[4]}`)&&n(h,"aria-labelledby",D),c&256&&n(h,"aria-valuetext",f[8])},i:Rl,o:Rl,d(f){f&&t(o),f&&t(L),f&&t(h)}}}function Bl(p,o,b){let{value:V}=o,{maxValue:I}=o,{minValue:S}=o,{meterLabel:w}=o,{id:L}=o,{lowValue:h}=o,{highValue:T}=o,{optimumValue:D}=o,{valueText:f=""}=o,{displayDecimal:c=!1}=o,{units:R=""}=o,{meterStyle:H=""}=o,{labelStyle:ee=""}=o,j,M;return Fl(()=>{c?(j=V,b(11,M=j.toString()+R)):(j=V/I*100,b(11,M=j+"%"))}),S>I&&console.log("The min value must be less than the max value"),p.$$set=g=>{"value"in g&&b(0,V=g.value),"maxValue"in g&&b(1,I=g.maxValue),"minValue"in g&&b(2,S=g.minValue),"meterLabel"in g&&b(3,w=g.meterLabel),"id"in g&&b(4,L=g.id),"lowValue"in g&&b(5,h=g.lowValue),"highValue"in g&&b(6,T=g.highValue),"optimumValue"in g&&b(7,D=g.optimumValue),"valueText"in g&&b(8,f=g.valueText),"displayDecimal"in g&&b(12,c=g.displayDecimal),"units"in g&&b(13,R=g.units),"meterStyle"in g&&b(9,H=g.meterStyle),"labelStyle"in g&&b(10,ee=g.labelStyle)},[V,I,S,w,L,h,T,D,f,H,ee,M,c,R]}class ot extends ql{constructor(o){super(),Ol(this,o,Bl,Wl,Ul,{value:0,maxValue:1,minValue:2,meterLabel:3,id:4,lowValue:5,highValue:6,optimumValue:7,valueText:8,displayDecimal:12,units:13,meterStyle:9,labelStyle:10})}}function Jl(p){let o,b,V,I,S,w,L,h,T,D,f,c,R,H,ee,j,M,g,mt,k,fe,q,ve,ht,ct,be,dt,ft,z,pe,vt,bt,ge,N,pt,te,gt,Et,ae,_t,Vt,wt,Ee,O,_e,yt,It,Ve,St,Lt,d,we,Tt,At,ye,xt,Dt,Ie,G,Mt,Ua="<Meter {value} {maxValue} {minValue} {meterLabel} {id}/>",Nt,Ct,Pt,Z,Rt,le,Ht,kt,qt,A,Se,Ot,Ut,Le,Ft,jt,Te,zt,Gt,Ae,Wt,Bt,xe,Jt,Kt,De,Qt,Xt,_,Me,Yt,Zt,Ne,$t,ea,Ce,ta,aa,Pe,la,ra,Re,na,sa,He,ia,oa,ke,ua,ma,qe,ha,ca,Oe,da,fa,Ue,W,va,Fa=`<Meter
                value={60}
                maxValue={100}
                minValue={0}
                meterLabel='Test Meter 1'
                id={1}
               />`,ba,pa,ga,Fe,Ea,_a,re,B,Va,je,wa,ya,ne,J,Ia,ze,Sa,La,se,K,Ta,Ge,Aa,xa,Q,We,ie,Da,Ma,X,Na,Be,U,Je,Ca,Pa,Ke,Ra,Ha,C,$,at;return B=new ot({props:{value:p[0],maxValue:100,minValue:0,meterLabel:"Test Meter 1",id:1}}),J=new ot({props:{value:p[0],maxValue:100,minValue:0,meterLabel:"Test Meter 1",id:1,lowValue:20,highValue:75,optimumValue:60}}),K=new ot({props:{value:p[0]/10,maxValue:10,minValue:0,meterLabel:"Test Meter 1",id:1,lowValue:5,displayDecimal:"false",units:" hours remaining",valueText:`${p[0]} hours remaining`}}),X=new ot({props:{value:p[0]/10,maxValue:10,minValue:0,meterLabel:"Test Meter 1",id:1,lowValue:5,meterStyle:"width: 50px;",labelStyle:"font-size: 20px; color: blue;"}}),$=new zl({props:{tableProps:p[1]}}),{c(){o=a("article"),b=a("header"),V=a("h1"),I=s(kl),S=u(),w=a("ul"),L=a("li"),h=s("Source: "),T=a("a"),D=s(qa),f=u(),c=a("li"),R=s("WAI-ARIA: "),H=a("a"),ee=s(Oa),j=u(),M=a("p"),g=s(`A meter is a graphical display of a numeric value that varies within a defined range. For
			example, a meter could be used to depict a device's current battery percentage or a car's fuel
			level`),mt=u(),k=a("main"),fe=a("section"),q=a("fieldset"),ve=a("legend"),ht=s("Installation"),ct=u(),be=a("h2"),dt=s("Installation"),ft=u(),z=a("section"),pe=a("p"),vt=s("Import the component in the script section of your Svelte file:"),bt=u(),ge=a("pre"),N=a("code"),pt=s(`
              import `),te=a("span"),gt=s("\u2774"),Et=s(" Meter "),ae=a("span"),_t=s("\u2775"),Vt=s(` from 'svve11'
            `),wt=u(),Ee=a("section"),O=a("fieldset"),_e=a("legend"),yt=s("Usage"),It=u(),Ve=a("h2"),St=s("Usage"),Lt=u(),d=a("section"),we=a("h3"),Tt=s("Creating a Meter"),At=u(),ye=a("p"),xt=s(`A meter instance can be created by placing the code below in the body of your Svelte
						file.`),Dt=u(),Ie=a("pre"),G=a("code"),Mt=s(`
              `),Nt=s(Ua),Ct=s(`
              `),Pt=u(),Z=a("p"),Rt=s("The meter has 5 "),le=a("span"),Ht=s("required"),kt=s(" attributes:"),qt=u(),A=a("ul"),Se=a("li"),Ot=s(`value (number): sets the current value of the meter. Must be within the minValue to
							maxValue range. It is recommended to use a reactive variable to allow meter value to
							change as necessary.`),Ut=u(),Le=a("li"),Ft=s("maxValue (number): sets the maximum value for the meter range"),jt=u(),Te=a("li"),zt=s("minValue (number): sets the minimum value for the meter range."),Gt=u(),Ae=a("li"),Wt=s(`meterLabel (string): sets the text label for the meter. The label will be
							automatically joined with a percentage calculation, unless otherwise specified. See
							displayDecimal in optional props section below.`),Bt=u(),xe=a("li"),Jt=s(`id (number): sets the id for the meter. Remember to provide different id numbers when
							instantiating more than one meter on a page as the id should be unique.`),Kt=u(),De=a("p"),Qt=s("The meter has 8 optional attributes:"),Xt=u(),_=a("ul"),Me=a("li"),Yt=s(`highValue (number): sets the value from which a current value above is considered
							high. Must be less than maxValue and greater than the minValue and lowValue.`),Zt=u(),Ne=a("li"),$t=s(`lowValue (number): sets the value from which a current value below is considered low.
							Must be greater than minValue and less than the maxValue and highValue.`),ea=u(),Ce=a("li"),ta=s(`optimumValue (number): sets the optimal numeric value of the meter. Must be a number
							between the minValue and maxValue. If the optimal value is set between the minValue
							and lowValue, or the maxValue and highValue, this range is considered optimal.
							Different browsers will color the bar differently depending on where the current value
							falls in relation to the optimal value.`),aa=u(),Pe=a("li"),la=s(`valueText (string): used for assistive technologies that read the value of the meter
							to the users. Most assistive technologies will read value as a percentage by default,
							thus this props should be provided if a percentage read does not make sense in the
							context of your meter use.`),ra=u(),Re=a("li"),na=s(`displayDecimal (boolean): this will default to false. If set to true, this indicates
							to the meter that the value should not be presented as a percentage. This prop must be
							accompanied by the units prop described next.`),sa=u(),He=a("li"),ia=s(`units (string): sets the units to be displayed in the meter label should the
							percentage appearance not be relevant.`),oa=u(),ke=a("li"),ua=s("meterstyle (string): sets the style for the meter for any custom styles."),ma=u(),qe=a("li"),ha=s("labelStyle (string): sets the style for the meter label for any custom styles."),ca=u(),Oe=a("h4"),da=s("Example Meter Code with only required props:"),fa=u(),Ue=a("pre"),W=a("code"),va=s(`
              `),ba=s(Fa),pa=s(`
              `),ga=u(),Fe=a("h4"),Ea=s("Example meter with only required props:"),_a=u(),re=a("div"),Xe(B.$$.fragment),Va=u(),je=a("h4"),wa=s("Example meter with highValue=85, lowValue=20 and optimalValue=80 props:"),ya=u(),ne=a("div"),Xe(J.$$.fragment),Ia=u(),ze=a("h4"),Sa=s("Example meter with displayDecimal=false and units props:"),La=u(),se=a("div"),Xe(K.$$.fragment),Ta=u(),Ge=a("h4"),Aa=s("Example meter with style strings:"),xa=u(),Q=a("div"),We=a("pre"),ie=a("code"),Da=s(`
                          meterStyle='width: 50px;'
                          labelStyle='font-size: 20px; color: blue;'
                  `),Ma=u(),Xe(X.$$.fragment),Na=u(),Be=a("section"),U=a("fieldset"),Je=a("legend"),Ca=s("Component API"),Pa=u(),Ke=a("h2"),Ra=s("Component API"),Ha=u(),C=a("div"),Xe($.$$.fragment),this.h()},l(E){o=l(E,"ARTICLE",{class:!0});var x=r(o);b=l(x,"HEADER",{});var F=r(b);V=l(F,"H1",{});var Qe=r(V);I=i(Qe,kl),Qe.forEach(t),S=m(F),w=l(F,"UL",{class:!0});var Y=r(w);L=l(Y,"LI",{});var oe=r(L);h=i(oe,"Source: "),T=l(oe,"A",{href:!0});var ja=r(T);D=i(ja,qa),ja.forEach(t),oe.forEach(t),f=m(Y),c=l(Y,"LI",{});var ka=r(c);R=i(ka,"WAI-ARIA: "),H=l(ka,"A",{href:!0});var za=r(H);ee=i(za,Oa),za.forEach(t),ka.forEach(t),Y.forEach(t),j=m(F),M=l(F,"P",{class:!0});var Ga=r(M);g=i(Ga,`A meter is a graphical display of a numeric value that varies within a defined range. For
			example, a meter could be used to depict a device's current battery percentage or a car's fuel
			level`),Ga.forEach(t),F.forEach(t),mt=m(x),k=l(x,"MAIN",{});var ue=r(k);fe=l(ue,"SECTION",{});var Wa=r(fe);q=l(Wa,"FIELDSET",{});var me=r(q);ve=l(me,"LEGEND",{});var Ba=r(ve);ht=i(Ba,"Installation"),Ba.forEach(t),ct=m(me),be=l(me,"H2",{});var Ja=r(be);dt=i(Ja,"Installation"),Ja.forEach(t),ft=m(me),z=l(me,"SECTION",{class:!0});var lt=r(z);pe=l(lt,"P",{});var Ka=r(pe);vt=i(Ka,"Import the component in the script section of your Svelte file:"),Ka.forEach(t),bt=m(lt),ge=l(lt,"PRE",{});var Qa=r(ge);N=l(Qa,"CODE",{class:!0});var he=r(N);pt=i(he,`
              import `),te=l(he,"SPAN",{class:!0});var Xa=r(te);gt=i(Xa,"\u2774"),Xa.forEach(t),Et=i(he," Meter "),ae=l(he,"SPAN",{class:!0});var Ya=r(ae);_t=i(Ya,"\u2775"),Ya.forEach(t),Vt=i(he,` from 'svve11'
            `),he.forEach(t),Qa.forEach(t),lt.forEach(t),me.forEach(t),Wa.forEach(t),wt=m(ue),Ee=l(ue,"SECTION",{});var Za=r(Ee);O=l(Za,"FIELDSET",{});var ce=r(O);_e=l(ce,"LEGEND",{});var $a=r(_e);yt=i($a,"Usage"),$a.forEach(t),It=m(ce),Ve=l(ce,"H2",{});var el=r(Ve);St=i(el,"Usage"),el.forEach(t),Lt=m(ce),d=l(ce,"SECTION",{class:!0});var v=r(d);we=l(v,"H3",{});var tl=r(we);Tt=i(tl,"Creating a Meter"),tl.forEach(t),At=m(v),ye=l(v,"P",{});var al=r(ye);xt=i(al,`A meter instance can be created by placing the code below in the body of your Svelte
						file.`),al.forEach(t),Dt=m(v),Ie=l(v,"PRE",{});var ll=r(Ie);G=l(ll,"CODE",{class:!0});var rt=r(G);Mt=i(rt,`
              `),Nt=i(rt,Ua),Ct=i(rt,`
              `),rt.forEach(t),ll.forEach(t),Pt=m(v),Z=l(v,"P",{});var nt=r(Z);Rt=i(nt,"The meter has 5 "),le=l(nt,"SPAN",{class:!0});var rl=r(le);Ht=i(rl,"required"),rl.forEach(t),kt=i(nt," attributes:"),nt.forEach(t),qt=m(v),A=l(v,"UL",{class:!0});var P=r(A);Se=l(P,"LI",{});var nl=r(Se);Ot=i(nl,`value (number): sets the current value of the meter. Must be within the minValue to
							maxValue range. It is recommended to use a reactive variable to allow meter value to
							change as necessary.`),nl.forEach(t),Ut=m(P),Le=l(P,"LI",{});var sl=r(Le);Ft=i(sl,"maxValue (number): sets the maximum value for the meter range"),sl.forEach(t),jt=m(P),Te=l(P,"LI",{});var il=r(Te);zt=i(il,"minValue (number): sets the minimum value for the meter range."),il.forEach(t),Gt=m(P),Ae=l(P,"LI",{});var ol=r(Ae);Wt=i(ol,`meterLabel (string): sets the text label for the meter. The label will be
							automatically joined with a percentage calculation, unless otherwise specified. See
							displayDecimal in optional props section below.`),ol.forEach(t),Bt=m(P),xe=l(P,"LI",{});var ul=r(xe);Jt=i(ul,`id (number): sets the id for the meter. Remember to provide different id numbers when
							instantiating more than one meter on a page as the id should be unique.`),ul.forEach(t),P.forEach(t),Kt=m(v),De=l(v,"P",{});var ml=r(De);Qt=i(ml,"The meter has 8 optional attributes:"),ml.forEach(t),Xt=m(v),_=l(v,"UL",{});var y=r(_);Me=l(y,"LI",{});var hl=r(Me);Yt=i(hl,`highValue (number): sets the value from which a current value above is considered
							high. Must be less than maxValue and greater than the minValue and lowValue.`),hl.forEach(t),Zt=m(y),Ne=l(y,"LI",{});var cl=r(Ne);$t=i(cl,`lowValue (number): sets the value from which a current value below is considered low.
							Must be greater than minValue and less than the maxValue and highValue.`),cl.forEach(t),ea=m(y),Ce=l(y,"LI",{});var dl=r(Ce);ta=i(dl,`optimumValue (number): sets the optimal numeric value of the meter. Must be a number
							between the minValue and maxValue. If the optimal value is set between the minValue
							and lowValue, or the maxValue and highValue, this range is considered optimal.
							Different browsers will color the bar differently depending on where the current value
							falls in relation to the optimal value.`),dl.forEach(t),aa=m(y),Pe=l(y,"LI",{});var fl=r(Pe);la=i(fl,`valueText (string): used for assistive technologies that read the value of the meter
							to the users. Most assistive technologies will read value as a percentage by default,
							thus this props should be provided if a percentage read does not make sense in the
							context of your meter use.`),fl.forEach(t),ra=m(y),Re=l(y,"LI",{});var vl=r(Re);na=i(vl,`displayDecimal (boolean): this will default to false. If set to true, this indicates
							to the meter that the value should not be presented as a percentage. This prop must be
							accompanied by the units prop described next.`),vl.forEach(t),sa=m(y),He=l(y,"LI",{});var bl=r(He);ia=i(bl,`units (string): sets the units to be displayed in the meter label should the
							percentage appearance not be relevant.`),bl.forEach(t),oa=m(y),ke=l(y,"LI",{});var pl=r(ke);ua=i(pl,"meterstyle (string): sets the style for the meter for any custom styles."),pl.forEach(t),ma=m(y),qe=l(y,"LI",{});var gl=r(qe);ha=i(gl,"labelStyle (string): sets the style for the meter label for any custom styles."),gl.forEach(t),y.forEach(t),ca=m(v),Oe=l(v,"H4",{});var El=r(Oe);da=i(El,"Example Meter Code with only required props:"),El.forEach(t),fa=m(v),Ue=l(v,"PRE",{});var _l=r(Ue);W=l(_l,"CODE",{class:!0});var st=r(W);va=i(st,`
              `),ba=i(st,Fa),pa=i(st,`
              `),st.forEach(t),_l.forEach(t),ga=m(v),Fe=l(v,"H4",{});var Vl=r(Fe);Ea=i(Vl,"Example meter with only required props:"),Vl.forEach(t),_a=m(v),re=l(v,"DIV",{class:!0});var wl=r(re);Ye(B.$$.fragment,wl),wl.forEach(t),Va=m(v),je=l(v,"H4",{});var yl=r(je);wa=i(yl,"Example meter with highValue=85, lowValue=20 and optimalValue=80 props:"),yl.forEach(t),ya=m(v),ne=l(v,"DIV",{class:!0});var Il=r(ne);Ye(J.$$.fragment,Il),Il.forEach(t),Ia=m(v),ze=l(v,"H4",{});var Sl=r(ze);Sa=i(Sl,"Example meter with displayDecimal=false and units props:"),Sl.forEach(t),La=m(v),se=l(v,"DIV",{class:!0});var Ll=r(se);Ye(K.$$.fragment,Ll),Ll.forEach(t),Ta=m(v),Ge=l(v,"H4",{});var Tl=r(Ge);Aa=i(Tl,"Example meter with style strings:"),Tl.forEach(t),xa=m(v),Q=l(v,"DIV",{class:!0});var it=r(Q);We=l(it,"PRE",{});var Al=r(We);ie=l(Al,"CODE",{class:!0});var xl=r(ie);Da=i(xl,`
                          meterStyle='width: 50px;'
                          labelStyle='font-size: 20px; color: blue;'
                  `),xl.forEach(t),Al.forEach(t),Ma=m(it),Ye(X.$$.fragment,it),it.forEach(t),v.forEach(t),ce.forEach(t),Za.forEach(t),Na=m(ue),Be=l(ue,"SECTION",{});var Dl=r(Be);U=l(Dl,"FIELDSET",{});var de=r(U);Je=l(de,"LEGEND",{});var Ml=r(Je);Ca=i(Ml,"Component API"),Ml.forEach(t),Pa=m(de),Ke=l(de,"H2",{});var Nl=r(Ke);Ra=i(Nl,"Component API"),Nl.forEach(t),Ha=m(de),C=l(de,"DIV",{role:!0,tabindex:!0,style:!0,class:!0});var Cl=r(C);Ye($.$$.fragment,Cl),Cl.forEach(t),de.forEach(t),Dl.forEach(t),ue.forEach(t),x.forEach(t),this.h()},h(){n(T,"href",qa),n(H,"href",Oa),n(w,"class","resource-links-list"),n(M,"class","header-paragraph"),n(te,"class","curly-symbol"),n(ae,"class","curly-symbol"),n(N,"class","code-block"),n(z,"class","content-section"),n(G,"class","code-block"),n(le,"class","bold-word"),n(A,"class","options-object-list"),n(W,"class","code-block"),n(re,"class","example-meter"),n(ne,"class","example-meter"),n(se,"class","example-meter"),n(ie,"class","code-block"),n(Q,"class","example-meter"),n(d,"class","content-section"),n(C,"role","region"),n(C,"tabindex","0"),Hl(C,"max-width","100%"),Hl(C,"overflow","auto"),n(C,"class","props-table"),n(o,"class","page-component")},m(E,x){ut(E,o,x),e(o,b),e(b,V),e(V,I),e(b,S),e(b,w),e(w,L),e(L,h),e(L,T),e(T,D),e(w,f),e(w,c),e(c,R),e(c,H),e(H,ee),e(b,j),e(b,M),e(M,g),e(o,mt),e(o,k),e(k,fe),e(fe,q),e(q,ve),e(ve,ht),e(q,ct),e(q,be),e(be,dt),e(q,ft),e(q,z),e(z,pe),e(pe,vt),e(z,bt),e(z,ge),e(ge,N),e(N,pt),e(N,te),e(te,gt),e(N,Et),e(N,ae),e(ae,_t),e(N,Vt),e(k,wt),e(k,Ee),e(Ee,O),e(O,_e),e(_e,yt),e(O,It),e(O,Ve),e(Ve,St),e(O,Lt),e(O,d),e(d,we),e(we,Tt),e(d,At),e(d,ye),e(ye,xt),e(d,Dt),e(d,Ie),e(Ie,G),e(G,Mt),e(G,Nt),e(G,Ct),e(d,Pt),e(d,Z),e(Z,Rt),e(Z,le),e(le,Ht),e(Z,kt),e(d,qt),e(d,A),e(A,Se),e(Se,Ot),e(A,Ut),e(A,Le),e(Le,Ft),e(A,jt),e(A,Te),e(Te,zt),e(A,Gt),e(A,Ae),e(Ae,Wt),e(A,Bt),e(A,xe),e(xe,Jt),e(d,Kt),e(d,De),e(De,Qt),e(d,Xt),e(d,_),e(_,Me),e(Me,Yt),e(_,Zt),e(_,Ne),e(Ne,$t),e(_,ea),e(_,Ce),e(Ce,ta),e(_,aa),e(_,Pe),e(Pe,la),e(_,ra),e(_,Re),e(Re,na),e(_,sa),e(_,He),e(He,ia),e(_,oa),e(_,ke),e(ke,ua),e(_,ma),e(_,qe),e(qe,ha),e(d,ca),e(d,Oe),e(Oe,da),e(d,fa),e(d,Ue),e(Ue,W),e(W,va),e(W,ba),e(W,pa),e(d,ga),e(d,Fe),e(Fe,Ea),e(d,_a),e(d,re),Ze(B,re,null),e(d,Va),e(d,je),e(je,wa),e(d,ya),e(d,ne),Ze(J,ne,null),e(d,Ia),e(d,ze),e(ze,Sa),e(d,La),e(d,se),Ze(K,se,null),e(d,Ta),e(d,Ge),e(Ge,Aa),e(d,xa),e(d,Q),e(Q,We),e(We,ie),e(ie,Da),e(Q,Ma),Ze(X,Q,null),e(k,Na),e(k,Be),e(Be,U),e(U,Je),e(Je,Ca),e(U,Pa),e(U,Ke),e(Ke,Ra),e(U,Ha),e(U,C),Ze($,C,null),at=!0},p(E,[x]){const F={};x&1&&(F.value=E[0]),B.$set(F);const Qe={};x&1&&(Qe.value=E[0]),J.$set(Qe);const Y={};x&1&&(Y.value=E[0]/10),x&1&&(Y.valueText=`${E[0]} hours remaining`),K.$set(Y);const oe={};x&1&&(oe.value=E[0]/10),X.$set(oe)},i(E){at||($e(B.$$.fragment,E),$e(J.$$.fragment,E),$e(K.$$.fragment,E),$e(X.$$.fragment,E),$e($.$$.fragment,E),at=!0)},o(E){et(B.$$.fragment,E),et(J.$$.fragment,E),et(K.$$.fragment,E),et(X.$$.fragment,E),et($.$$.fragment,E),at=!1},d(E){E&&t(o),tt(B),tt(J),tt(K),tt(X),tt($)}}}const kl="Meter",qa="https://github.com/Svve11/",Oa="https://w3c.github.io/aria-practices/#meter";function Kl(p,o,b){let V;const I=setInterval(function(){b(0,V=Math.floor(Math.random()*100))},2e3);jl(()=>clearInterval(I));const S={id:"props-table-meter",ariaLabel:"Meter props table",ariaDescription:"This table describes the props that should be passed to the meter",columnNames:["Prop","Type","Required","Default Value"],rowsContent:[["value","number","true","N/A"],["maxValue","number","true","N/A"],["minValue","number","true","N/A"],["meterLabel","string","true","N/A"],["lowValue","number","false","N/A"],["highValue","number","false","N/A"],["optimumValue","number","false","N/A"],["valueText","string","false","N/A"],["displayDecimal","boolean","false","false"],["units","string","false","N/A"],["meterStyle","string","false","N/A"],["labelStyle","string","false","N/A"]],styles:Gl};return b(0,V=60),[V,S]}class Yl extends ql{constructor(o){super(),Ol(this,o,Kl,Jl,Ul,{})}}export{Yl as default};
